<template>
  &lt;div class=&quot;container mx-auto px-4 py-8&quot;&gt;
    &lt;!-- ヘッダー --&gt;
    &lt;div class=&quot;mb-6&quot;&gt;
      &lt;div class=&quot;flex items-center justify-between&quot;&gt;
        &lt;div&gt;
          &lt;h1 class=&quot;text-2xl font-bold text-gray-900&quot;&gt;本の貸し出し&lt;/h1&gt;
          &lt;p class=&quot;mt-1 text-sm text-gray-600&quot;&gt;
            生徒に本を貸し出します
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;
      &lt;!-- 本の選択 --&gt;
      &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;
        &lt;h2 class=&quot;text-lg font-medium mb-4&quot;&gt;本の選択&lt;/h2&gt;
        &lt;div class=&quot;space-y-4&quot;&gt;
          &lt;div&gt;
            &lt;label for=&quot;bookSearch&quot; class=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;
              本を検索
            &lt;/label&gt;
            &lt;input
              type=&quot;text&quot;
              id=&quot;bookSearch&quot;
              v-model=&quot;bookSearch&quot;
              @input=&quot;searchBooks&quot;
              class=&quot;w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500&quot;
              placeholder=&quot;タイトルまたはISBNで検索...&quot;
            /&gt;
          &lt;/div&gt;

          &lt;div v-if=&quot;searchResults.length &gt; 0&quot; class=&quot;border rounded-md divide-y&quot;&gt;
            &lt;div
              v-for=&quot;book in searchResults&quot;
              :key=&quot;book.id&quot;
              @click=&quot;selectBook(book)&quot;
              class=&quot;p-4 hover:bg-gray-50 cursor-pointer&quot;
              :class=&quot;{ &#39;bg-blue-50&#39;: selectedBook?.id === book.id }&quot;
            &gt;
              &lt;div class=&quot;font-medium&quot;&gt;{{ book.title }}&lt;/div&gt;
              &lt;div class=&quot;text-sm text-gray-500&quot;&gt;
                {{ book.author }} | ISBN: {{ book.isbn || &#39;なし&#39; }}
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;!-- 生徒の選択 --&gt;
      &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;
        &lt;h2 class=&quot;text-lg font-medium mb-4&quot;&gt;生徒の選択&lt;/h2&gt;
        &lt;div class=&quot;space-y-4&quot;&gt;
          &lt;div&gt;
            &lt;label for=&quot;studentSearch&quot; class=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;
              生徒を検索
            &lt;/label&gt;
            &lt;input
              type=&quot;text&quot;
              id=&quot;studentSearch&quot;
              v-model=&quot;studentSearch&quot;
              @input=&quot;searchStudents&quot;
              class=&quot;w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500&quot;
              placeholder=&quot;名前または学籍番号で検索...&quot;
            /&gt;
          &lt;/div&gt;

          &lt;div v-if=&quot;studentResults.length &gt; 0&quot; class=&quot;border rounded-md divide-y&quot;&gt;
            &lt;div
              v-for=&quot;student in studentResults&quot;
              :key=&quot;student.id&quot;
              @click=&quot;selectStudent(student)&quot;
              class=&quot;p-4 hover:bg-gray-50 cursor-pointer&quot;
              :class=&quot;{ &#39;bg-blue-50&#39;: selectedStudent?.id === student.id }&quot;
            &gt;
              &lt;div class=&quot;font-medium&quot;&gt;{{ student.name }}&lt;/div&gt;
              &lt;div class=&quot;text-sm text-gray-500&quot;&gt;
                {{ student.grade }}年{{ student.class }}組 | 学籍番号: {{ student.student_number }}
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- 貸出フォーム --&gt;
    &lt;div class=&quot;mt-8 bg-white rounded-lg shadow p-6&quot;&gt;
      &lt;h2 class=&quot;text-lg font-medium mb-4&quot;&gt;貸出情報&lt;/h2&gt;
      &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;
        &lt;div&gt;
          &lt;h3 class=&quot;text-sm font-medium text-gray-700 mb-2&quot;&gt;選択された本&lt;/h3&gt;
          &lt;div v-if=&quot;selectedBook&quot; class=&quot;p-4 bg-gray-50 rounded-md&quot;&gt;
            &lt;div class=&quot;font-medium&quot;&gt;{{ selectedBook.title }}&lt;/div&gt;
            &lt;div class=&quot;text-sm text-gray-500&quot;&gt;
              {{ selectedBook.author }} | ISBN: {{ selectedBook.isbn || &#39;なし&#39; }}
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div v-else class=&quot;text-sm text-gray-500&quot;&gt;
            本が選択されていません
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;h3 class=&quot;text-sm font-medium text-gray-700 mb-2&quot;&gt;選択された生徒&lt;/h3&gt;
          &lt;div v-if=&quot;selectedStudent&quot; class=&quot;p-4 bg-gray-50 rounded-md&quot;&gt;
            &lt;div class=&quot;font-medium&quot;&gt;{{ selectedStudent.name }}&lt;/div&gt;
            &lt;div class=&quot;text-sm text-gray-500&quot;&gt;
              {{ selectedStudent.grade }}年{{ selectedStudent.class }}組 | 
              学籍番号: {{ selectedStudent.student_number }}
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div v-else class=&quot;text-sm text-gray-500&quot;&gt;
            生徒が選択されていません
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&quot;mt-6 space-y-4&quot;&gt;
        &lt;div&gt;
          &lt;label for=&quot;borrowedDate&quot; class=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;
            貸出日 *
          &lt;/label&gt;
          &lt;input
            type=&quot;date&quot;
            id=&quot;borrowedDate&quot;
            v-model=&quot;borrowedDate&quot;
            required
            :max=&quot;today&quot;
            class=&quot;w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500&quot;
          /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex justify-end space-x-3&quot;&gt;
          &lt;button
            type=&quot;button&quot;
            @click=&quot;resetForm&quot;
            class=&quot;px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50&quot;
          &gt;
            クリア
          &lt;/button&gt;
          &lt;button
            type=&quot;button&quot;
            @click=&quot;handleBorrow&quot;
            :disabled=&quot;!canBorrow&quot;
            class=&quot;px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md shadow-sm hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed&quot;
          &gt;
            貸し出す
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- エラーメッセージ --&gt;
    &lt;div
      v-if=&quot;error&quot;
      class=&quot;mt-4 bg-red-50 border border-red-200 rounded-md p-4 text-sm text-red-600&quot;
    &gt;
      {{ error }}
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script setup&gt;
import { ref, computed } from &#39;vue&#39;;
import axios from &#39;axios&#39;;
import { useRouter } from &#39;vue-router&#39;;

const router = useRouter();

const bookSearch = ref(&#39;&#39;);
const studentSearch = ref(&#39;&#39;);
const searchResults = ref([]);
const studentResults = ref([]);
const selectedBook = ref(null);
const selectedStudent = ref(null);
const borrowedDate = ref(new Date().toISOString().split(&#39;T&#39;)[0]);
const error = ref(&#39;&#39;);

// 本日の日付（貸出日の上限として使用）
const today = new Date().toISOString().split(&#39;T&#39;)[0];

// 貸出可能かどうかをチェック
const canBorrow = computed(() =&gt; {
  return selectedBook.value &amp;&amp; selectedStudent.value &amp;&amp; borrowedDate.value;
});

// 本を検索
const searchBooks = async () =&gt; {
  if (!bookSearch.value) {
    searchResults.value = [];
    return;
  }

  try {
    const response = await axios.get(&#39;/api/books&#39;, {
      params: { search: bookSearch.value }
    });
    searchResults.value = response.data.data;
  } catch (err) {
    error.value = &#39;本の検索中にエラーが発生しました&#39;;
    console.error(err);
  }
};

// 生徒を検索
const searchStudents = async () =&gt; {
  if (!studentSearch.value) {
    studentResults.value = [];
    return;
  }

  try {
    const response = await axios.get(&#39;/api/students&#39;, {
      params: { search: studentSearch.value }
    });
    studentResults.value = response.data.data;
  } catch (err) {
    error.value = &#39;生徒の検索中にエラーが発生しました&#39;;
    console.error(err);
  }
};

// 本を選択
const selectBook = (book) =&gt; {
  selectedBook.value = book;
};

// 生徒を選択
const selectStudent = (student) =&gt; {
  selectedStudent.value = student;
};

// 貸出処理
const handleBorrow = async () =&gt; {
  if (!canBorrow.value) return;

  try {
    await axios.post(&#39;/api/borrows&#39;, {
      book_id: selectedBook.value.id,
      student_id: selectedStudent.value.id,
      borrowed_date: borrowedDate.value
    });

    // 成功したら生徒の詳細ページに遷移
    router.push(`/students/${selectedStudent.value.id}`);
  } catch (err) {
    error.value = &#39;貸出処理中にエラーが発生しました&#39;;
    console.error(err);
  }
};

// フォームをリセット
const resetForm = () =&gt; {
  bookSearch.value = &#39;&#39;;
  studentSearch.value = &#39;&#39;;
  searchResults.value = [];
  studentResults.value = [];
  selectedBook.value = null;
  selectedStudent.value = null;
  borrowedDate.value = new Date().toISOString().split(&#39;T&#39;)[0];
  error.value = &#39;&#39;;
};
&lt;/script&gt;
